package com.innova.leaderboard;import android.content.Context;import androidx.annotation.NonNull;import androidx.room.Database;import androidx.room.Room;import androidx.room.RoomDatabase;import androidx.sqlite.db.SupportSQLiteDatabase;import com.innova.leaderboard.daos.HourLeaderDao;import com.innova.leaderboard.daos.SkillLeaderDao;import com.innova.leaderboard.models.HourLeader;import com.innova.leaderboard.models.SkillLeader;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import static com.innova.leaderboard.utils.DummyData.getDummyHourLeaders;import static com.innova.leaderboard.utils.DummyData.getDummySkillLeaders;@Database(entities = {HourLeader.class, SkillLeader.class},        version = 2, exportSchema = false)public abstract class LeaderBoardRoomDatabase extends RoomDatabase {    private final String TAG = this.getClass().getSimpleName();    public static final String LEADER_BOARD_DATABASE = "leader_board_database";    public abstract HourLeaderDao mHourLeaderDao();    public abstract SkillLeaderDao mSkillLeaderDao();    private static volatile LeaderBoardRoomDatabase INSTANCE;    private static final int NUMBER_OF_THREADS = 4;    public static final ExecutorService databaseWriteExecutor =            Executors.newFixedThreadPool(NUMBER_OF_THREADS);    public static LeaderBoardRoomDatabase getDatabase(final Context context) {        if (INSTANCE == null) {            synchronized (LeaderBoardRoomDatabase.class) {                if (INSTANCE == null) {                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),                            LeaderBoardRoomDatabase.class, LEADER_BOARD_DATABASE)//                            .addCallback(sRoomDatabaseCallback)                            .fallbackToDestructiveMigration()                            //TODO: REMOVE ACCESS ON MAIN THREAD                            .allowMainThreadQueries()                            .build();                }            }        }        return INSTANCE;    }    //    //!!!!! START WITH FRESH DATA ON EACH LAUNCH    private static final Callback sRoomDatabaseCallback = new Callback() {        @Override        public void onOpen(@NonNull SupportSQLiteDatabase db) {            super.onOpen(db);            databaseWriteExecutor.execute(new Runnable() {                @Override                public void run() {                    HourLeaderDao hourLeaderDao = INSTANCE.mHourLeaderDao();                    SkillLeaderDao skillLeaderDao = INSTANCE.mSkillLeaderDao();                    hourLeaderDao.deleteAll();                    skillLeaderDao.deleteAll();                    List<HourLeader> hourLeaders = getDummyHourLeaders();                    hourLeaderDao.insertHourLeader(hourLeaders);                    List<SkillLeader> skillLeaders = getDummySkillLeaders();                    skillLeaderDao.insertSkillLeader(skillLeaders);                }            });        }    };}